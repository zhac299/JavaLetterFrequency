1.3 Real programming languages
Time for a short history lesson. Early computers were used mostly for numerical calculations, often with military applications.
 
By the early 1950’s, some far sighted business people began to apply computers to the massive clerical effort that went into 

calculation the payroll for large companies, and other accounting operations.

Writing programs for early computers was hard because, as we’ve seen, every program had to be broken down into single operations,

and the writer had to keep track of where all the intermediate results would be stored. BY the mid-1950’s systems called autocodes were beginning to appear.

These allowed complex formulae like those of our quadratic program to be written in one line, but control flow, sub program calling and other things still had 

to be written using the particular computer’s special primitive instructions. As a result, every program was tied to the particular kind of computer it was 

designed for, since different kinds of computer have different primitive instructions.

In 1957 the first compiler that could be used on more than one kind of computer appeared. 

The programmer wrote programs in a notation, or programming language, called FORTRAN which is short for FORmula TRANslation. 

Not long after, other languages started to appear, and in the last fifty years thousands of different programming languages have been design and implemented.

FORTRAN was a breakthrough because it allowed portability. A program written in FORTRAN could, in principle at least, be run on any computer with a FORTRAN compiler.

It turns out that the portability offered by FORTRAN wasn’t really good enough: subtle differences in the way numbers were represented and exceptional events were

handled on different computers meant that you could never be sure that large programs would run correctly on a different machine.

The portability problem has continued to vex systems designers right down to the present day. The ultimate solution is to use a sort of intermediate ‘idealised’

computer which has highly standardised behaviour. The first successful system to work this was Java the programming language,

whose intermediary is called the Java Virtual Machine (JVM). Java can be run on desk top computers, on laptops and even on mobile phones:

in fact most Android mobile phone applications are written in Java.

Rather few languages become widely used: perhaps twenty or thirty languages in the last thirty years have had genuinely broad application. 

At the moment, the most prevalent languages are Java, C++, and C, along with some scripting languages such as Python and Visual basic. 

Historically, the choice of language to use has been dictated by execution speed, but modern computers are ‘fast enough’ for many applications so these

days we are often more interested in how well a language supports the writing of software rather than how rapidly it allows the software to run.

So, for instance, the guaranteed portability of Java removes the need to worry about the differences between, say, a Windows laptop and an Apple desktop.

As a result, we use Java even though Java applications usually run a little slower than equivalent programs written in C.

The main thing is to learn to program, not to learn just a language. Comp

Hassan
